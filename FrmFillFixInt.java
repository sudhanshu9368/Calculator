/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newsystem;

import java.awt.HeadlessException;
import java.beans.PropertyVetoException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author JaiShriRam
 */
public class FrmFillFixInt extends javax.swing.JInternalFrame {

    Statement stripName_st, farmName_st, stripData_st, tempAdd_st, getTempStrip_st, selectInsert_st, getPreviousGenLastYear_st, showData_st, getData_st, get_date_st, getPreviousDate_st, lastGenNum_st, getPreviousLastDate_st, preMonthQuery_st = null;
    ResultSet stripName_rs, farmName_rs, stripData_rs, getTempStrip_rs, saveData_rs, selectInsert_rs, getPreviousGenLastYear_rs, showData_rs, getData_rs, get_date_rs, getPreviousDate_rs, lastGenNum_rs, getPreviousLastDate_rs, preMonthQuery_rs = null;
    String strip = null;
    String selectStrip = null;
    int selectedRow, monthNo;
    Connection co = null;
    PreparedStatement saveData_ps = null;

    /**
     * Creates new form FrmFillFixInt
     */
    public FrmFillFixInt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        sheet_name = new javax.swing.JLabel();
        month = new javax.swing.JLabel();
        year = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        strip_name = new javax.swing.JLabel();
        S1_0 = new javax.swing.JTextField();
        S1_1 = new javax.swing.JTextField();
        S1_2 = new javax.swing.JTextField();
        S1_3 = new javax.swing.JTextField();
        S1_4 = new javax.swing.JTextField();
        S1_5 = new javax.swing.JTextField();
        S1_6 = new javax.swing.JTextField();
        S1_7 = new javax.swing.JTextField();
        S1_8 = new javax.swing.JTextField();
        S1_9 = new javax.swing.JTextField();
        btnContinue1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSaveRow = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Select_Strip = new javax.swing.JComboBox<>();
        btnCalculate = new javax.swing.JButton();
        cmbYear = new javax.swing.JComboBox<>();
        cmbMonth = new javax.swing.JComboBox<>();
        btnLoadStrips = new javax.swing.JButton();
        txtFarmName = new javax.swing.JTextField();
        year1 = new javax.swing.JLabel();
        ShowData = new javax.swing.JButton();
        btnLoadFarm = new javax.swing.JButton();
        selectFarm = new javax.swing.JComboBox<>();
        btnViewMonthRecord = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.FlowLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sheet_name.setFont(new java.awt.Font("Bodoni MT", 1, 24)); // NOI18N
        sheet_name.setForeground(new java.awt.Color(15, 48, 161));
        sheet_name.setText(" Fixed Sheet");
        jPanel1.add(sheet_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 40, 130, 36));

        month.setFont(new java.awt.Font("Bodoni MT", 1, 16)); // NOI18N
        month.setForeground(new java.awt.Color(15, 41, 161));
        month.setText("Month");
        jPanel1.add(month, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 45, 24));

        year.setFont(new java.awt.Font("Bodoni MT", 1, 16)); // NOI18N
        year.setForeground(new java.awt.Color(15, 48, 161));
        year.setText("Year");
        jPanel1.add(year, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 44, -1));

        strip_name.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        strip_name.setForeground(new java.awt.Color(15, 48, 161));
        strip_name.setText("Fixed Strip");

        S1_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                S1_0ActionPerformed(evt);
            }
        });

        S1_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                S1_7ActionPerformed(evt);
            }
        });

        S1_8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                S1_8ActionPerformed(evt);
            }
        });

        btnContinue1.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        btnContinue1.setForeground(new java.awt.Color(15, 41, 161));
        btnContinue1.setText("Continue To CheckOut");
        btnContinue1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinue1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(strip_name, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(S1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(S1_5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_8, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(S1_9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnContinue1)
                .addGap(364, 364, 364))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(S1_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(S1_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(strip_name, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnContinue1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 550, 1140, -1));

        jTable1.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(15, 48, 161));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial No.", "Generated No.", "0i", "0e", "1i", "1e", "2i", "2e", "3i", "3e", "4i", "4e", "5i", "5e", "6i", "6e", "7i", "7e", "8i", "8e", "9i", "9e"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAlignmentX(5.5F);
        jTable1.setGridColor(new java.awt.Color(102, 102, 102));
        jTable1.setIntercellSpacing(new java.awt.Dimension(2, 2));
        jTable1.setRowHeight(23);
        jTable1.setSelectionBackground(new java.awt.Color(204, 204, 204));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 154, 1136, 320));

        btnSaveRow.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSaveRow.setForeground(new java.awt.Color(15, 48, 161));
        btnSaveRow.setText("Save Data");
        btnSaveRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveRowActionPerformed(evt);
            }
        });
        jPanel1.add(btnSaveRow, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 590, 203, -1));

        jLabel2.setFont(new java.awt.Font("Bodoni MT", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(15, 48, 161));
        jLabel2.setText("Choose Your Strip");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 482, 189, 36));

        Select_Strip.setFont(new java.awt.Font("Bodoni MT", 1, 12)); // NOI18N
        Select_Strip.setForeground(new java.awt.Color(15, 48, 161));
        Select_Strip.setToolTipText("Select Strip..");
        Select_Strip.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)));
        Select_Strip.setEnabled(false);
        Select_Strip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_StripActionPerformed(evt);
            }
        });
        jPanel1.add(Select_Strip, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 494, 208, -1));

        btnCalculate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCalculate.setForeground(new java.awt.Color(15, 48, 161));
        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 102, -1));

        cmbYear.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        cmbYear.setForeground(new java.awt.Color(15, 48, 161));
        cmbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Year--", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        jPanel1.add(cmbYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 130, -1));

        cmbMonth.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        cmbMonth.setForeground(new java.awt.Color(15, 48, 161));
        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Month--", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", " " }));
        cmbMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMonthItemStateChanged(evt);
            }
        });
        cmbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthActionPerformed(evt);
            }
        });
        jPanel1.add(cmbMonth, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 130, -1));

        btnLoadStrips.setText("Load Strips");
        btnLoadStrips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadStripsActionPerformed(evt);
            }
        });
        jPanel1.add(btnLoadStrips, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 490, -1, -1));
        jPanel1.add(txtFarmName, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 110, -1));

        year1.setFont(new java.awt.Font("Bodoni MT", 1, 16)); // NOI18N
        year1.setForeground(new java.awt.Color(15, 48, 161));
        year1.setText("Farm Name");
        jPanel1.add(year1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 80, -1));

        ShowData.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        ShowData.setForeground(new java.awt.Color(15, 48, 161));
        ShowData.setText("Show Data");
        ShowData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowDataActionPerformed(evt);
            }
        });
        jPanel1.add(ShowData, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 130, -1));

        btnLoadFarm.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        btnLoadFarm.setForeground(new java.awt.Color(15, 48, 161));
        btnLoadFarm.setText("Load Farm List");
        btnLoadFarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFarmActionPerformed(evt);
            }
        });
        jPanel1.add(btnLoadFarm, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, 130, -1));

        selectFarm.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        selectFarm.setForeground(new java.awt.Color(15, 48, 161));
        selectFarm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Farm Name--" }));
        selectFarm.setEnabled(false);
        selectFarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFarmActionPerformed(evt);
            }
        });
        jPanel1.add(selectFarm, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 60, 200, -1));

        btnViewMonthRecord.setFont(new java.awt.Font("Bodoni MT", 0, 14)); // NOI18N
        btnViewMonthRecord.setForeground(new java.awt.Color(255, 0, 0));
        btnViewMonthRecord.setText("View Month Record");
        btnViewMonthRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMonthRecordActionPerformed(evt);
            }
        });
        jPanel1.add(btnViewMonthRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 80, -1, -1));

        jLabel22.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("0");

        jLabel23.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("1");

        jLabel24.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("3");

        jLabel25.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("2");

        jLabel26.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("7");

        jLabel27.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("6");

        jLabel28.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("5");

        jLabel29.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("4");

        jLabel30.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("9");

        jLabel31.setFont(new java.awt.Font("Bodoni MT Black", 1, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("8");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(83, 83, 83)
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(80, 80, 80)
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(74, 74, 74)
                .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(71, 71, 71)
                .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(72, 72, 72)
                .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(68, 68, 68)
                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(75, 75, 75)
                .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(78, 78, 78)
                .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(86, 86, 86)
                .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                .addGap(46, 46, 46))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 1140, -1));

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void S1_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_S1_0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_S1_0ActionPerformed

    private void S1_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_S1_7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_S1_7ActionPerformed

    private void S1_8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_S1_8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_S1_8ActionPerformed

    private void btnContinue1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinue1ActionPerformed
        co = DataBaseConnection.ConnectDB();
        try {
            String s0 = S1_0.getText();
            String s1 = S1_1.getText();
            String s2 = S1_2.getText();
            String s3 = S1_3.getText();
            String s4 = S1_4.getText();
            String s5 = S1_5.getText();
            String s6 = S1_6.getText();
            String s7 = S1_7.getText();
            String s8 = S1_8.getText();
            String s9 = S1_9.getText();
            
            if (("".equals(s0)) || ("".equals(s1)) || ("".equals(s2)) || ("".equals(s3)) || ("".equals(s4)) || ("".equals(s5)) || ("".equals(s6)) || ("".equals(s7)) || ("".equals(s8)) || ("".equals(s9))) {
                JOptionPane.showMessageDialog(null, "Please Select/Fill the Strip First!!!");
            } else {
                selectStrip = Select_Strip.getSelectedItem().toString();
                String tempAdd = "update temp_strip set strip_name='" + selectStrip + "','0'='" + s0 + "','1'='" + s1 + "','2'='" + s2 + "','3'='" + s3 + "','4'='" + s4 + "','5'='" + s5 + "','6'='" + s6 + "','7'='" + s7 + "','8'='" + s8 + "','9'='" + s9 + "' where Strip_id='1'";
                tempAdd_st = co.createStatement();
                tempAdd_st.execute(tempAdd);
                JOptionPane.showMessageDialog(null, "Now Calculate the result");
            }
        } catch (HeadlessException | SQLException ex) {
            System.out.println(ex);
        } finally {
            try {
                co.close();
            } catch (SQLException ex) {
                Logger.getLogger(FrmFillFixInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnContinue1ActionPerformed

    private void btnSaveRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveRowActionPerformed
        co = DataBaseConnection.ConnectDB();
        try {
            //          co=DataBaseConnection.ConnectDB();
            String Cmonth = (String) cmbMonth.getSelectedItem();
            String Cyear = (String) cmbYear.getSelectedItem();
            String farmName = txtFarmName.getText();
            monthNo = cmbMonth.getSelectedIndex();
            String serial_no[][] = new String[31][22];
            ArrayList<String> list = new ArrayList();
            int count = 0;
            String saveData = "insert into FixedInternal(date,month,year,'0L','0R','1L','1R','2L','2R','3L','3R','4L','4R','5L'"
                    + ",'5R','6L','6R','7L','7R','8L','8R','9L','9R',g_no, month_no, farm_name) "
                    + "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
            saveData_ps = co.prepareStatement(saveData);
            TableModel model = jTable1.getModel();
            int totalRow = model.getRowCount();
            System.out.println(totalRow);
            for (int ad = 0; ad < 31; ad++) {
                serial_no[ad][0] = (String) jTable1.getValueAt(ad, 0);
                if (serial_no[ad][0] != null) {
                    list.add(serial_no[ad][0]);
                    System.out.println("data[" + ad + "][" + 0 + "]=" + serial_no[ad][0]);
                }
            }
            for (int g = 0; g < list.size(); g++) {
                String number = list.get(g);
                System.out.println(number);
                count++;
                System.out.println(count);
                String selectInsert = "select * from FixedInternal where date='" + number + "' and month='" + Cmonth + "' and year='" + Cyear + "' and farm_name='" + farmName + "'";
                selectInsert_st = co.createStatement();
                selectInsert_rs = selectInsert_st.executeQuery(selectInsert);
                if (selectInsert_rs.next()) {
//                    JOptionPane.showMessageDialog(null, "Date Can not be Overlapped!!!");
                } else {
                    String date = (String) jTable1.getValueAt(g, 0);
                    String g_n = (String) jTable1.getValueAt(g, 1);
                    String zin = (String) jTable1.getValueAt(g, 2);
                    String zex = (String) jTable1.getValueAt(g, 3);
                    String oin = (String) jTable1.getValueAt(g, 4);
                    String oex = (String) jTable1.getValueAt(g, 5);
                    String tin = (String) jTable1.getValueAt(g, 6);
                    String tex = (String) jTable1.getValueAt(g, 7);
                    String threein = (String) jTable1.getValueAt(g, 8);
                    String threeex = (String) jTable1.getValueAt(g, 9);
                    String fin = (String) jTable1.getValueAt(g, 10);
                    String fex = (String) jTable1.getValueAt(g, 11);
                    String fvin = (String) jTable1.getValueAt(g, 12);
                    String fvex = (String) jTable1.getValueAt(g, 13);
                    String sixin = (String) jTable1.getValueAt(g, 14);
                    String sixex = (String) jTable1.getValueAt(g, 15);
                    String sevin = (String) jTable1.getValueAt(g, 16);
                    String sevex = (String) jTable1.getValueAt(g, 17);
                    String eightin = (String) jTable1.getValueAt(g, 18);
                    String eightex = (String) jTable1.getValueAt(g, 19);
                    String nineteenin = (String) jTable1.getValueAt(g, 20);
                    String nineteenex = (String) jTable1.getValueAt(g, 21);

                    saveData_ps.setString(1, date);
                    saveData_ps.setString(2, Cmonth);
                    saveData_ps.setString(3, Cyear);
                    saveData_ps.setString(4, zin);
                    saveData_ps.setString(5, zex);
                    saveData_ps.setString(6, oin);
                    saveData_ps.setString(7, oex);
                    saveData_ps.setString(8, tin);
                    saveData_ps.setString(9, tex);
                    saveData_ps.setString(10, threein);
                    saveData_ps.setString(11, threeex);
                    saveData_ps.setString(12, fin);
                    saveData_ps.setString(13, fex);
                    saveData_ps.setString(14, fvin);
                    saveData_ps.setString(15, fvex);
                    saveData_ps.setString(16, sixin);
                    saveData_ps.setString(17, sixex);
                    saveData_ps.setString(18, sevin);
                    saveData_ps.setString(19, sevex);
                    saveData_ps.setString(20, eightin);
                    saveData_ps.setString(21, eightex);
                    saveData_ps.setString(22, nineteenin);
                    saveData_ps.setString(23, nineteenex);
                    saveData_ps.setString(24, g_n);
                    saveData_ps.setInt(25, monthNo);
                    saveData_ps.setString(26, farmName);
                    saveData_ps.execute();
                }
            }
            JOptionPane.showMessageDialog(null, "data saved..!!");

        } catch (HeadlessException | SQLException ex) {
            System.out.println(ex);
        } finally {
            try {
                co.close();
            } catch (SQLException ex) {
                Logger.getLogger(FrmFillFixInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveRowActionPerformed

    private void Select_StripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_StripActionPerformed
        co = DataBaseConnection.ConnectDB();
        try {
            String zero = null;
            String one = null;
            String two = null;
            String three = null;
            String four = null;
            String five = null;
            String six = null;
            String seven = null;
            String eight = null;
            String nine = null;
            selectStrip = Select_Strip.getSelectedItem().toString();
            String stripData = "select * from strip where strip_name='" + selectStrip + "'";
            stripData_st = co.createStatement();
            stripData_rs = stripData_st.executeQuery(stripData);
            if (stripData_rs.next()) {
                zero = stripData_rs.getString("0");
                one = stripData_rs.getString("1");
                two = stripData_rs.getString("2");
                three = stripData_rs.getString("3");
                four = stripData_rs.getString("4");
                five = stripData_rs.getString("5");
                six = stripData_rs.getString("6");
                seven = stripData_rs.getString("7");
                eight = stripData_rs.getString("8");
                nine = stripData_rs.getString("9");
                System.out.print(nine);
            }

            S1_0.setText(zero);
            S1_1.setText(one);
            S1_2.setText(two);
            S1_3.setText(three);
            S1_4.setText(four);
            S1_5.setText(five);
            S1_6.setText(six);
            S1_7.setText(seven);
            S1_8.setText(eight);
            S1_9.setText(nine);

        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            try {
                co.close();
            } catch (SQLException ex) {
                Logger.getLogger(FrmFillFixInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_Select_StripActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        co = DataBaseConnection.ConnectDB();
        try {

            TableModel model = jTable1.getModel();
            int rRow[] = jTable1.getSelectedRows();
            String[][] data = new String[31][22];
            int lastNumber = rRow.length;
            System.out.println(lastNumber);
            System.out.println(rRow[0]);
            for (int i = 0; i < lastNumber; i++) {
                int rowIndex = rRow[i];
                data[rowIndex][1] = (String) model.getValueAt(rowIndex, 1);
                System.out.println("data[" + rowIndex + "][" + 1 + "]=" + data[rowIndex][1]);
            }

            String s0 = null;
            String s1 = null;
            String s2 = null;
            String s3 = null;
            String s4 = null;
            String s5 = null;
            String s6 = null;
            String s7 = null;
            String s8 = null;
            String s9 = null;

            String getTempStrip = "select * from temp_strip";
            getTempStrip_st = co.createStatement();
            getTempStrip_rs = getTempStrip_st.executeQuery(getTempStrip);
            if (getTempStrip_rs.next()) {
                s0 = getTempStrip_rs.getString("0");
                s1 = getTempStrip_rs.getString("1");
                s2 = getTempStrip_rs.getString("2");
                s3 = getTempStrip_rs.getString("3");
                s4 = getTempStrip_rs.getString("4");
                s5 = getTempStrip_rs.getString("5");
                s6 = getTempStrip_rs.getString("6");
                s7 = getTempStrip_rs.getString("7");
                s8 = getTempStrip_rs.getString("8");
                s9 = getTempStrip_rs.getString("9");
                System.out.println(s0);
                if (s0 == "") {
                    System.out.println("In rs. next");
                    JOptionPane.showMessageDialog(null, "select the strip First");
                } else {
                    String[] actualScript = new String[10];
                    String[] rotatedScript = new String[10];
                    actualScript[0] = s0;
                    actualScript[1] = s1;
                    actualScript[2] = s2;
                    actualScript[3] = s3;
                    actualScript[4] = s4;
                    actualScript[5] = s5;
                    actualScript[6] = s6;
                    actualScript[7] = s7;
                    actualScript[8] = s8;
                    actualScript[9] = s9;

                    for (int i = 0; i < 10; i++) {
                        System.out.println(actualScript[i]);
                    }
                    /**
                     * ****************************************************
                     */
                    String firstNo;
                    String CurrentNo;
                    String year_no = (String) cmbYear.getSelectedItem();
                    int month_no = cmbMonth.getSelectedIndex();
                    String monthName = (String) cmbMonth.getSelectedItem();
                    String farmName = txtFarmName.getText();
                    ArrayList<String> fillDate = new ArrayList();
                    ArrayList<String> fillDateLastYear = new ArrayList();
                    ArrayList<String> fillMonthLastYear = new ArrayList();
                    int y_no = Integer.parseInt(year_no);
                    System.out.println("year=" + y_no);
                    System.out.println("month=" + month_no);
//                    String get_date = "select * from FixedInternal where month_no='" + month_no + "'";
                    String getGenNoLastYear;
//                    get_date_st = co.createStatement();
//                    get_date_rs = get_date_st.executeQuery(get_date);

                    for (int i = 0; i < lastNumber; i++) {
                        int rowIndex = rRow[i];
                        data[rowIndex][1] = (String) model.getValueAt(rowIndex, 1);

                        CurrentNo = data[rowIndex][1];
                        int prvNum = rowIndex;
                        if (prvNum == -1) {
                            if (monthName.equals("January"))//here we will check the starting month of the year...!!
                            {
                                int year_get = y_no - 1;//here we will get the previous year.....!!
                                String previous_year = String.valueOf(year_get);;
                                System.out.println("you are in last " + year_get + "year");

                                /**
                                 * ***********************new added data************
                                 */
                                String getPreviousDate = "select * from FixedInternal where year='" + previous_year + "' "
                                        + "and farm_name='" + farmName + "'";
                                getPreviousDate_st = co.createStatement();
                                getPreviousDate_rs = getPreviousDate_st.executeQuery(getPreviousDate);
                                while (getPreviousDate_rs.next()) {
                                    fillDateLastYear.add(getPreviousDate_rs.getString("date"));
                                    fillMonthLastYear.add(getPreviousDate_rs.getString("month"));
                                }
                                String getdateLast = fillDateLastYear.get(fillDateLastYear.size() - 1);
                                String getmonthLast = fillMonthLastYear.get(fillMonthLastYear.size() - 1);

                                String getPreviousGenLastYear = "select * from FixedInternal where year='" + previous_year + "' and month ='" + getmonthLast + "'"
                                        + " and date='" + getdateLast + "' and farm_name='" + farmName + "'";
                                getPreviousGenLastYear_st = co.createStatement();
                                getPreviousGenLastYear_rs = getPreviousGenLastYear_st.executeQuery(getPreviousGenLastYear);
                                if (getPreviousGenLastYear_rs.next()) {
                                    getGenNoLastYear = getPreviousGenLastYear_rs.getString("g_no"); //this is the last number...!!!
                                    System.out.println(getGenNoLastYear);
                                    firstNo = getGenNoLastYear;
                                    /**
                                     * *************end NewData*******************************
                                     */
//                                    int j;
//                                    char fstno = firstNo.charAt(0);
//                                    for (j = 0; j < 10; j++) {
//                                        char matchFst = actualScript[j].charAt(0);
//                                        if (fstno == matchFst) {
//                                            break;
//                                        }
//                                    }
//                                    System.out.println(j);
//                                    int l;
//                                    for (l = 0; j < 10; l++) {
//                                        rotatedScript[l] = actualScript[j];
//                                        j++;
//                                    }
//                                    int f = 0;
//                                    for (int k = l; k < 10; k++) {
//                                        rotatedScript[k] = actualScript[f];
//                                        f++;
//                                    }
                                    //		for(int a = 0; a<10; a++){
                                    //			System.out.print(rotatedScript[a]+" ");
                                    //                    }
                                    //                }
                                    System.out.println(Arrays.toString(rotatedScript));
                                    System.out.println("Current Number : - " + CurrentNo);
                                    char internalNumber = CurrentNo.charAt(0);
                                    char externalNumber = CurrentNo.charAt(1);

                                    System.out.println("Internal No:-" + internalNumber);
                                    System.out.println("External No:-" + externalNumber);

                                    for (int cs = 0; cs < 20; cs += 2) {
                                        String sn = actualScript[cs / 2];
                                        if (sn.indexOf(internalNumber) != -1) {
                                            model.setValueAt("*", rowIndex, cs + 2);
                                        } else {
                                            model.setValueAt(null, rowIndex, cs + 2);
                                        }
                                    }
                                    for (int cs = 0; cs < 20; cs += 2) {
                                        String sn = actualScript[cs / 2];
                                        if (sn.indexOf(externalNumber) != -1) {
                                            model.setValueAt("*", rowIndex, cs + 3);
                                        } else {
                                            model.setValueAt(null, rowIndex, cs + 3);
                                        }
                                    }
                                }
                            } else {
                                /**
                                 * ******************If*not*Jan***************************
                                 */
                                int preMonth = month_no - 1;
                                System.out.println("Previous month is" + preMonth);
                                String getPreviousLastDate = "Select * from FixedInternal where month_no='" + preMonth + "' and farm_name='" + farmName + "'";
                                getPreviousLastDate_st = co.createStatement();
                                getPreviousLastDate_rs = getPreviousLastDate_st.executeQuery(getPreviousLastDate);
                                while (getPreviousLastDate_rs.next()) {
                                    fillDate.add(getPreviousLastDate_rs.getString("date"));
                                    System.out.println(getPreviousLastDate_rs.getString("date"));
                                    System.out.println("you are in month" + getPreviousLastDate_rs.getString("month"));
                                    String d_date = getPreviousLastDate_rs.getString("date");
//                                   
                                }
                                String lastdate = fillDate.get(fillDate.size() - 1);
                                String lastGenNum = "select * from FixedInternal where date='" + lastdate + "'";
                                lastGenNum_st = co.createStatement();
                                lastGenNum_rs = lastGenNum_st.executeQuery(lastGenNum);
                                if (lastGenNum_rs.next()) {
                                    String lastGenNumberMonth = lastGenNum_rs.getString("g_no");//here we will get the last generated number ...
                                    System.out.println("last gen no-" + lastGenNumberMonth);
                                    firstNo = lastGenNumberMonth;
                                    int j;
                                    char fstno = firstNo.charAt(0);
//                                    for (j = 0; j < 10; j++) {
//                                        char matchFst = actualScript[j].charAt(0);
//                                        if (fstno == matchFst) {
//                                            break;
//                                        }
//                                    }
//                                    System.out.println(j);
//                                    int l;
//                                    for (l = 0; j < 10; l++) {
//                                        rotatedScript[l] = actualScript[j];
//                                        j++;
//                                    }
//                                    int f = 0;
//                                    for (int k = l; k < 10; k++) {
//                                        rotatedScript[k] = actualScript[f];
//                                        f++;
//                                    }
                                    //		for(int a = 0; a<10; a++){
                                    //			System.out.print(rotatedScript[a]+" ");
                                    //                    }
                                    //                }

                                    System.out.println(Arrays.toString(rotatedScript));
                                    System.out.println("Current Number : - " + CurrentNo);
                                    char internalNumber = CurrentNo.charAt(0);
                                    char externalNumber = CurrentNo.charAt(1);

                                    System.out.println("Internal No:-" + internalNumber);
                                    System.out.println("External No:-" + externalNumber);

                                    for (int cs = 0; cs < 20; cs += 2) {
                                        String sn = actualScript[cs / 2];
                                        if (sn.indexOf(internalNumber) != -1) {
                                            model.setValueAt("*", rowIndex, cs + 2);
                                        } else {
                                            model.setValueAt(null, rowIndex, cs + 2);
                                        }
                                    }
                                    for (int cs = 0; cs < 20; cs += 2) {
                                        String sn = actualScript[cs / 2];
                                        if (sn.indexOf(externalNumber) != -1) {
                                            model.setValueAt("*", rowIndex, cs + 3);
                                        } else {
                                            model.setValueAt(null, rowIndex, cs + 3);
                                        }
                                    }
                                }

                            }
//                            }
                            /**
                             * *****************last
                             * month***********************************
                             */

                        } else {
                            firstNo = (String) model.getValueAt(prvNum, 1);
                            int j;
                            char fstno = firstNo.charAt(0);
//                            for (j = 0; j < 10; j++) {
//                                char matchFst = actualScript[j].charAt(0);
//                                if (fstno == matchFst) {
//                                    break;
//                                }
//                            }
//                            System.out.println(j);
//                            int l;
//                            for (l = 0; j < 10; l++) {
//                                rotatedScript[l] = actualScript[j];
//                                j++;
//                            }
//                            int f = 0;
//                            for (int k = l; k < 10; k++) {
//                                rotatedScript[k] = actualScript[f];
//                                f++;
//                            }
                            //		for(int a = 0; a<10; a++){
                            //			System.out.print(rotatedScript[a]+" ");
                            //                    }
                            //                }

                            System.out.println(Arrays.toString(rotatedScript));
                            System.out.println("Current Number : - " + CurrentNo);
                            char internalNumber = CurrentNo.charAt(0);
                            char externalNumber = CurrentNo.charAt(1);

                            System.out.println("Internal No:-" + internalNumber);
                            System.out.println("External No:-" + externalNumber);

                            for (int cs = 0; cs < 20; cs += 2) {
                                String sn = actualScript[cs / 2];
                                if (sn.indexOf(internalNumber) != -1) {
                                    model.setValueAt("*", rowIndex, cs + 2);
                                } else {
                                    model.setValueAt(null, rowIndex, cs + 2);
                                }
                            }
                            for (int cs = 0; cs < 20; cs += 2) {
                                String sn = actualScript[cs / 2];
                                if (sn.indexOf(externalNumber) != -1) {
                                    model.setValueAt("*", rowIndex, cs + 3);
                                } else {
                                    model.setValueAt(null, rowIndex, cs + 3);
                                }
                            }
                        }
                        /**
                         * ******************************My
                         * Code************************************************
                         */
                        //		int j;
                        //		char fstno = firstNo.charAt(0);
                        //		for(j=0; j<10; j++){
                        //			char matchFst = actualScript[j].charAt(0);
                        //			if(fstno == matchFst){
                        //				break;
                        //			}
                        //		}
                        //		System.out.println(j);
                        //		int l;
                        //		for(l=0; j<10; l++){
                        //			rotatedScript[l] = actualScript[j];
                        //			j++;
                        //		}
                        //		int f=0;
                        //		for(int k=l ; k<10; k++){
                        //			rotatedScript[k] = actualScript[f];
                        //			f++;
                        //		}
                        //
                        //		for(int a = 0; a<10; a++){
                        //			System.out.print(rotatedScript[a]+" ");
                        //		}
                        /**
                         * ******************************My
                         * Code***********************************************
                         */
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select the strip First");
            }

        } catch (HeadlessException | SQLException ex) {
            System.out.println(ex);
        } finally {
            try {
                co.close();
            } catch (SQLException ex) {
                Logger.getLogger(FrmFillMovInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        TableColumnModel tcm = jTable1.getColumnModel();
        for (int i = 2; i < jTable1.getColumnModel().getColumnCount(); i++) {
            TableColumn column = tcm.getColumn(i);
            column.setPreferredWidth(44);
        }
        TableColumn column = tcm.getColumn(1);
        column.setPreferredWidth(160);
        //Centering jtable data
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable1.setDefaultRenderer(Object.class, centerRenderer);
    }//GEN-LAST:event_formInternalFrameOpened

    private void cmbMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMonthItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMonthItemStateChanged

    private void cmbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthActionPerformed
        ////        String Cyear=(String) cmbMonth.getSelectedItem();
        ////        String Cmonth=(String)cmbYear.getSelectedItem();
        ////        ArrayList<String> Slist=new ArrayList();
        ////        try{
        ////           String showData="select * from FixedInternal where year='"+Cyear+"' and month='"+Cmonth+"'";
        ////            showData_st=co.createStatement();
        ////            showData_rs=showData_st.executeQuery(showData);
        ////            while(showData_rs.next())
        ////            {
        ////               Slist.add(showData_rs.getString("date"));
        ////            }
        ////            System.out.println(Slist);
        ////            for(int add=0;add<Slist.size();add++)
        ////            {
        ////                String getData="select * from FixedInternal where year='"+Cyear+"' and month='"+Cmonth+"' and date='"+Slist.get(add)+"'";
        ////                getData_st=co.createStatement();
        ////                getData_rs=getData_st.executeQuery(getData);
        ////                if(getData_rs.next())
        ////                {
        ////                   jTable1.setValueAt(getData_rs.getString("date"), add, 0);
        ////                   jTable1.setValueAt(getData_rs.getString("g_no"), add, 1);
        ////                   jTable1.setValueAt(getData_rs.getString("0L"), add, 2);
        ////                   jTable1.setValueAt(getData_rs.getString("0R"), add, 3);
        ////                   jTable1.setValueAt(getData_rs.getString("1L"), add, 4);
        ////                   jTable1.setValueAt(getData_rs.getString("1R"), add, 5);
        ////                   jTable1.setValueAt(getData_rs.getString("2L"), add, 6);
        ////                   jTable1.setValueAt(getData_rs.getString("2R"), add, 7);
        ////                   jTable1.setValueAt(getData_rs.getString("3L"), add, 8);
        ////                   jTable1.setValueAt(getData_rs.getString("3R"), add, 9);
        ////                   jTable1.setValueAt(getData_rs.getString("4L"), add, 10);
        ////                   jTable1.setValueAt(getData_rs.getString("4R"), add, 11);
        ////                   jTable1.setValueAt(getData_rs.getString("5L"), add, 12);
        ////                   jTable1.setValueAt(getData_rs.getString("5R"), add, 13);
        ////                   jTable1.setValueAt(getData_rs.getString("6L"), add, 14);
        ////                   jTable1.setValueAt(getData_rs.getString("6R"), add, 15);
        ////                   jTable1.setValueAt(getData_rs.getString("7L"), add, 16);
        ////                   jTable1.setValueAt(getData_rs.getString("7R"), add, 17);
        ////                   jTable1.setValueAt(getData_rs.getString("8L"), add, 18);
        ////                   jTable1.setValueAt(getData_rs.getString("8R"), add, 19);
        ////                   jTable1.setValueAt(getData_rs.getString("9L"), add, 20);
        ////                   jTable1.setValueAt(getData_rs.getString("9R"), add, 21);
        ////                }
        ////            }
        ////            System.out.println("End");
        ////        }
        ////        catch(Exception ex){
        ////            ex.printStackTrace();
        ////        }
        ////
        ////
        ////       // TODO add your handling code here:
    }//GEN-LAST:event_cmbMonthActionPerformed

    private void btnLoadStripsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadStripsActionPerformed
        System.out.println("Month Number is: " + cmbMonth.getSelectedIndex());
        Select_Strip.setEnabled(false);
        Select_Strip.removeAllItems();
        co = DataBaseConnection.ConnectDB();
        try {
            String stripName = "select * from strip";
            stripName_st = co.createStatement();
            stripName_rs = stripName_st.executeQuery(stripName);
            while (stripName_rs.next()) {
                strip = stripName_rs.getString("strip_name");
                System.out.println(strip);
                Select_Strip.addItem(strip);

            }
            Select_Strip.setEnabled(true);

            //               JOptionPane.showMessageDialog(null,"data added in to the combobox");
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            try {
                stripName_st.close();
                stripName_rs.close();
                co.close();
            } catch (SQLException ex) {
                Logger.getLogger(FrmFillMovInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLoadStripsActionPerformed

    private void ShowDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowDataActionPerformed
        String Cmonth = (String) cmbMonth.getSelectedItem();
        String Cyear = (String) cmbYear.getSelectedItem();
        String farmName = txtFarmName.getText();
        System.out.println(Cmonth);
        ArrayList<String> Slist = new ArrayList();
        co = DataBaseConnection.ConnectDB();
        try {
            String showData1 = "select * from FixedInternal where year='" + Cyear + "' and month='" + Cmonth + "'"
                    + "and farm_name='" + farmName + "'";
            showData_st = co.createStatement();
            showData_rs = showData_st.executeQuery(showData1);
            while (showData_rs.next()) {
                Slist.add(showData_rs.getString("date"));
            }
            System.out.println(Slist);
            int SlistLength = Slist.size();
            int noDataLength = 31 - SlistLength;
            for (int add = 0; add < SlistLength; add++) {
                String getData = "select * from FixedInternal where year='" + Cyear + "' and month='" + Cmonth + "' and date='" + Slist.get(add) + "' and "
                        + "farm_name='" + farmName + "'";
                getData_st = co.createStatement();
                getData_rs = getData_st.executeQuery(getData);
                if (getData_rs.next()) {
                    jTable1.setValueAt(getData_rs.getString("date"), add, 0);
                    jTable1.setValueAt(getData_rs.getString("g_no"), add, 1);
                    jTable1.setValueAt(getData_rs.getString("0L"), add, 2);
                    jTable1.setValueAt(getData_rs.getString("0R"), add, 3);
                    jTable1.setValueAt(getData_rs.getString("1L"), add, 4);
                    jTable1.setValueAt(getData_rs.getString("1R"), add, 5);
                    jTable1.setValueAt(getData_rs.getString("2L"), add, 6);
                    jTable1.setValueAt(getData_rs.getString("2R"), add, 7);
                    jTable1.setValueAt(getData_rs.getString("3L"), add, 8);
                    jTable1.setValueAt(getData_rs.getString("3R"), add, 9);
                    jTable1.setValueAt(getData_rs.getString("4L"), add, 10);
                    jTable1.setValueAt(getData_rs.getString("4R"), add, 11);
                    jTable1.setValueAt(getData_rs.getString("5L"), add, 12);
                    jTable1.setValueAt(getData_rs.getString("5R"), add, 13);
                    jTable1.setValueAt(getData_rs.getString("6L"), add, 14);
                    jTable1.setValueAt(getData_rs.getString("6R"), add, 15);
                    jTable1.setValueAt(getData_rs.getString("7L"), add, 16);
                    jTable1.setValueAt(getData_rs.getString("7R"), add, 17);
                    jTable1.setValueAt(getData_rs.getString("8L"), add, 18);
                    jTable1.setValueAt(getData_rs.getString("8R"), add, 19);
                    jTable1.setValueAt(getData_rs.getString("9L"), add, 20);
                    jTable1.setValueAt(getData_rs.getString("9R"), add, 21);
                }
            }
            for (int ndL = SlistLength; ndL < noDataLength; ndL++) {
                jTable1.setValueAt(null, ndL, 0);
                jTable1.setValueAt(null, ndL, 1);
                jTable1.setValueAt(null, ndL, 2);
                jTable1.setValueAt(null, ndL, 3);
                jTable1.setValueAt(null, ndL, 4);
                jTable1.setValueAt(null, ndL, 5);
                jTable1.setValueAt(null, ndL, 6);
                jTable1.setValueAt(null, ndL, 7);
                jTable1.setValueAt(null, ndL, 8);
                jTable1.setValueAt(null, ndL, 9);
                jTable1.setValueAt(null, ndL, 10);
                jTable1.setValueAt(null, ndL, 11);
                jTable1.setValueAt(null, ndL, 12);
                jTable1.setValueAt(null, ndL, 13);
                jTable1.setValueAt(null, ndL, 14);
                jTable1.setValueAt(null, ndL, 15);
                jTable1.setValueAt(null, ndL, 16);
                jTable1.setValueAt(null, ndL, 17);
                jTable1.setValueAt(null, ndL, 18);
                jTable1.setValueAt(null, ndL, 19);
                jTable1.setValueAt(null, ndL, 20);
                jTable1.setValueAt(null, ndL, 21);
            }
            System.out.println("End");
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            try {
                co.close();
            } catch (SQLException ex) {
                Logger.getLogger(FrmFillMovInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ShowDataActionPerformed

    private void btnLoadFarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFarmActionPerformed
        selectFarm.setEnabled(false);
        selectFarm.removeAllItems();
        co = DataBaseConnection.ConnectDB();
        try {
            String farm = null;
            String farmName = "select distinct(farm_name) as farmList from FixedInternal";
            farmName_st = co.createStatement();
            farmName_rs = farmName_st.executeQuery(farmName);
            if (farmName_rs.getString("farmList") != null) {
                while (farmName_rs.next()) {
//                    if (farmName_rs.getString("farmList") != null) {
                    farm = farmName_rs.getString("farmList");
                    System.out.println("farm name: " + farm);
                    selectFarm.addItem(farm);
//                    }
                }
            }
            co.close();
            selectFarm.setEnabled(true);
            //               JOptionPane.showMessageDialog(null,"data added in to the combobox");
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            try {
                co.close();
            } catch (SQLException ex) {
                Logger.getLogger(FrmFillMovInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnLoadFarmActionPerformed

    private void selectFarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFarmActionPerformed
        if (selectFarm.isEnabled() == true) {
            txtFarmName.setText(selectFarm.getSelectedItem().toString());
        }
    }//GEN-LAST:event_selectFarmActionPerformed

    private void btnViewMonthRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMonthRecordActionPerformed
//        btnViewMonthRecord.setText("Loading...");
        if (cmbMonth.getSelectedIndex() != 0 && cmbYear.getSelectedIndex() != 0) {
            String monthLcl = cmbMonth.getSelectedItem().toString();
            String yearLcl = cmbYear.getSelectedItem().toString();
            String sheetLcl = "Fixed Sheet";
            String farmName = txtFarmName.getText().trim();
            FrmViewMonth fvm = new FrmViewMonth(monthLcl, yearLcl, sheetLcl, farmName);
            DesktopForm.Desktop.add(fvm);
            fvm.setVisible(true);
            fvm.moveToFront();
            try {
                fvm.setSelected(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FrmFillFixInt.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Can not found the data for selected month/year");
            cmbYear.requestFocus();
        }
    }//GEN-LAST:event_btnViewMonthRecordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField S1_0;
    private javax.swing.JTextField S1_1;
    private javax.swing.JTextField S1_2;
    private javax.swing.JTextField S1_3;
    private javax.swing.JTextField S1_4;
    private javax.swing.JTextField S1_5;
    private javax.swing.JTextField S1_6;
    private javax.swing.JTextField S1_7;
    private javax.swing.JTextField S1_8;
    private javax.swing.JTextField S1_9;
    private javax.swing.JComboBox<String> Select_Strip;
    private javax.swing.JButton ShowData;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnContinue1;
    private javax.swing.JButton btnLoadFarm;
    private javax.swing.JButton btnLoadStrips;
    private javax.swing.JButton btnSaveRow;
    private javax.swing.JButton btnViewMonthRecord;
    private javax.swing.JComboBox<String> cmbMonth;
    private javax.swing.JComboBox<String> cmbYear;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel month;
    private javax.swing.JComboBox<String> selectFarm;
    private javax.swing.JLabel sheet_name;
    private javax.swing.JLabel strip_name;
    private javax.swing.JTextField txtFarmName;
    private javax.swing.JLabel year;
    private javax.swing.JLabel year1;
    // End of variables declaration//GEN-END:variables
}
